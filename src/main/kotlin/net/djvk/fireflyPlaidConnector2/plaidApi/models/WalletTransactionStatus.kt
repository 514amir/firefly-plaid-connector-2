/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The status of the transaction.  `INITIATED`: This is the initial state of all transactions. It indicates that the transaction has been initiated and is currently being processed.  `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.  `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.  `FAILED`: The transaction failed to process successfully. This is a terminal status.  `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
 *
 * Values: iNITIATED,eXECUTED,sETTLED,bLOCKED,fAILED
 */

enum class WalletTransactionStatus(val value: kotlin.String) {

    @JsonProperty(value = "INITIATED")
    iNITIATED("INITIATED"),

    @JsonProperty(value = "EXECUTED")
    eXECUTED("EXECUTED"),

    @JsonProperty(value = "SETTLED")
    sETTLED("SETTLED"),

    @JsonProperty(value = "BLOCKED")
    bLOCKED("BLOCKED"),

    @JsonProperty(value = "FAILED")
    fAILED("FAILED");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is WalletTransactionStatus) "$data" else null

        /**
         * Returns a valid [WalletTransactionStatus] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): WalletTransactionStatus? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

