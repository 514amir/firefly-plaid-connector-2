/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * A code representing the reason Plaid declined to guarantee this transfer:  `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.  `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.  `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guaranteed ACH has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.  `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.  `REQUIRED_PARAM_MISSING`: Required fields are missing.
 *
 * Values: rETURNBANK,rETURNCUSTOMER,gUARANTEELIMITREACHED,rISKESTIMATEUNAVAILABLE,rEQUIREDPARAMMISSING
 */

enum class TransferAuthorizationGuaranteeDecisionRationaleCode(val value: kotlin.String) {

    @JsonProperty(value = "RETURN_BANK")
    rETURNBANK("RETURN_BANK"),

    @JsonProperty(value = "RETURN_CUSTOMER")
    rETURNCUSTOMER("RETURN_CUSTOMER"),

    @JsonProperty(value = "GUARANTEE_LIMIT_REACHED")
    gUARANTEELIMITREACHED("GUARANTEE_LIMIT_REACHED"),

    @JsonProperty(value = "RISK_ESTIMATE_UNAVAILABLE")
    rISKESTIMATEUNAVAILABLE("RISK_ESTIMATE_UNAVAILABLE"),

    @JsonProperty(value = "REQUIRED_PARAM_MISSING")
    rEQUIREDPARAMMISSING("REQUIRED_PARAM_MISSING");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? =
            if (data is TransferAuthorizationGuaranteeDecisionRationaleCode) "$data" else null

        /**
         * Returns a valid [TransferAuthorizationGuaranteeDecisionRationaleCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TransferAuthorizationGuaranteeDecisionRationaleCode? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

