/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.
 *
 * @param errorType A broad categorization of the error. Safe for programmatic use.
 * @param errorCode The particular error code. Safe for programmatic use.
 * @param errorMessage A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
 * @param displayMessage A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
 * @param requestId A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
 * @param causes In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
 * @param status The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
 * @param documentationUrl The URL of a Plaid documentation page with more information about the error
 * @param suggestedAction Suggested steps for resolving the error
 */

data class Error(

    /* A broad categorization of the error. Safe for programmatic use. */
    @field:JsonProperty("error_type")
    val errorType: Error.ErrorType,

    /* The particular error code. Safe for programmatic use. */
    @field:JsonProperty("error_code")
    val errorCode: kotlin.String,

    /* A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
    @field:JsonProperty("error_message")
    val errorMessage: kotlin.String,

    /* A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use. */
    @field:JsonProperty("display_message")
    val displayMessage: kotlin.String?,

    /* A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
    @field:JsonProperty("request_id")
    val requestId: kotlin.String? = null,

    /* In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object. */
    @field:JsonProperty("causes")
    val causes: kotlin.collections.List<kotlin.Any>? = null,

    /* The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook. */
    @field:JsonProperty("status")
    val status: java.math.BigDecimal? = null,

    /* The URL of a Plaid documentation page with more information about the error */
    @field:JsonProperty("documentation_url")
    val documentationUrl: kotlin.String? = null,

    /* Suggested steps for resolving the error */
    @field:JsonProperty("suggested_action")
    val suggestedAction: kotlin.String? = null

) : kotlin.collections.HashMap<String, kotlin.Any>() {

    /**
     * A broad categorization of the error. Safe for programmatic use.
     *
     * Values: iNVALIDREQUEST,iNVALIDRESULT,iNVALIDINPUT,iNSTITUTIONERROR,rATELIMITEXCEEDED,aPIERROR,iTEMERROR,aSSETREPORTERROR,rECAPTCHAERROR,oAUTHERROR,pAYMENTERROR,bANKTRANSFERERROR,iNCOMEVERIFICATIONERROR
     */
    enum class ErrorType(val value: kotlin.String) {
        @JsonProperty(value = "INVALID_REQUEST")
        iNVALIDREQUEST("INVALID_REQUEST"),
        @JsonProperty(value = "INVALID_RESULT")
        iNVALIDRESULT("INVALID_RESULT"),
        @JsonProperty(value = "INVALID_INPUT")
        iNVALIDINPUT("INVALID_INPUT"),
        @JsonProperty(value = "INSTITUTION_ERROR")
        iNSTITUTIONERROR("INSTITUTION_ERROR"),
        @JsonProperty(value = "RATE_LIMIT_EXCEEDED")
        rATELIMITEXCEEDED("RATE_LIMIT_EXCEEDED"),
        @JsonProperty(value = "API_ERROR")
        aPIERROR("API_ERROR"),
        @JsonProperty(value = "ITEM_ERROR")
        iTEMERROR("ITEM_ERROR"),
        @JsonProperty(value = "ASSET_REPORT_ERROR")
        aSSETREPORTERROR("ASSET_REPORT_ERROR"),
        @JsonProperty(value = "RECAPTCHA_ERROR")
        rECAPTCHAERROR("RECAPTCHA_ERROR"),
        @JsonProperty(value = "OAUTH_ERROR")
        oAUTHERROR("OAUTH_ERROR"),
        @JsonProperty(value = "PAYMENT_ERROR")
        pAYMENTERROR("PAYMENT_ERROR"),
        @JsonProperty(value = "BANK_TRANSFER_ERROR")
        bANKTRANSFERERROR("BANK_TRANSFER_ERROR"),
        @JsonProperty(value = "INCOME_VERIFICATION_ERROR")
        iNCOMEVERIFICATIONERROR("INCOME_VERIFICATION_ERROR");
    }
}

