/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `\"GBP\"` must be used.
 *
 * Values: gBP,eUR,pLN,sEK,dKK,nOK,cHF,cZK
 */

enum class PaymentAmountCurrency(val value: kotlin.String) {

    @JsonProperty(value = "GBP")
    gBP("GBP"),

    @JsonProperty(value = "EUR")
    eUR("EUR"),

    @JsonProperty(value = "PLN")
    pLN("PLN"),

    @JsonProperty(value = "SEK")
    sEK("SEK"),

    @JsonProperty(value = "DKK")
    dKK("DKK"),

    @JsonProperty(value = "NOK")
    nOK("NOK"),

    @JsonProperty(value = "CHF")
    cHF("CHF"),

    @JsonProperty(value = "CZK")
    cZK("CZK");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PaymentAmountCurrency) "$data" else null

        /**
         * Returns a valid [PaymentAmountCurrency] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PaymentAmountCurrency? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

