/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The status of the payment.  `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.  `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.  `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.  `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.  `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.  `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.  `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.  `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.  `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.  Deprecated: These statuses will be removed in a future release.  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.  `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.  `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
 *
 * Values: iNPUTNEEDED,pROCESSING,iNITIATED,cOMPLETED,iNSUFFICIENTFUNDS,fAILED,bLOCKED,uNKNOWN,eXECUTED,sETTLED,aUTHORISING,cANCELLED,eSTABLISHED,rEJECTED
 */

enum class PaymentInitiationPaymentStatus(val value: kotlin.String) {

    @JsonProperty(value = "PAYMENT_STATUS_INPUT_NEEDED")
    iNPUTNEEDED("PAYMENT_STATUS_INPUT_NEEDED"),

    @JsonProperty(value = "PAYMENT_STATUS_PROCESSING")
    pROCESSING("PAYMENT_STATUS_PROCESSING"),

    @JsonProperty(value = "PAYMENT_STATUS_INITIATED")
    iNITIATED("PAYMENT_STATUS_INITIATED"),

    @JsonProperty(value = "PAYMENT_STATUS_COMPLETED")
    cOMPLETED("PAYMENT_STATUS_COMPLETED"),

    @JsonProperty(value = "PAYMENT_STATUS_INSUFFICIENT_FUNDS")
    iNSUFFICIENTFUNDS("PAYMENT_STATUS_INSUFFICIENT_FUNDS"),

    @JsonProperty(value = "PAYMENT_STATUS_FAILED")
    fAILED("PAYMENT_STATUS_FAILED"),

    @JsonProperty(value = "PAYMENT_STATUS_BLOCKED")
    bLOCKED("PAYMENT_STATUS_BLOCKED"),

    @JsonProperty(value = "PAYMENT_STATUS_UNKNOWN")
    uNKNOWN("PAYMENT_STATUS_UNKNOWN"),

    @JsonProperty(value = "PAYMENT_STATUS_EXECUTED")
    eXECUTED("PAYMENT_STATUS_EXECUTED"),

    @JsonProperty(value = "PAYMENT_STATUS_SETTLED")
    sETTLED("PAYMENT_STATUS_SETTLED"),

    @JsonProperty(value = "PAYMENT_STATUS_AUTHORISING")
    aUTHORISING("PAYMENT_STATUS_AUTHORISING"),

    @JsonProperty(value = "PAYMENT_STATUS_CANCELLED")
    cANCELLED("PAYMENT_STATUS_CANCELLED"),

    @JsonProperty(value = "PAYMENT_STATUS_ESTABLISHED")
    eSTABLISHED("PAYMENT_STATUS_ESTABLISHED"),

    @JsonProperty(value = "PAYMENT_STATUS_REJECTED")
    rEJECTED("PAYMENT_STATUS_REJECTED");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PaymentInitiationPaymentStatus) "$data" else null

        /**
         * Returns a valid [PaymentInitiationPaymentStatus] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PaymentInitiationPaymentStatus? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

