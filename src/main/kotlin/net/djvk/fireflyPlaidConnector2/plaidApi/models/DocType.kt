/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.plaidApi.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The type of document.  `DOCUMENT_TYPE_PAYSTUB`: A paystub.  `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.  `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.  `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.  `UNKNOWN`: Document type could not be determined.
 *
 * Values: uNKNOWN,dOCUMENTTYPEPAYSTUB,dOCUMENTTYPEBANKSTATEMENT,dOCUMENTTYPEUSTAXW2,dOCUMENTTYPEUSMILITARYERAS,dOCUMENTTYPEUSMILITARYLES,dOCUMENTTYPEUSMILITARYCLES,dOCUMENTTYPEGIG,dOCUMENTTYPENONE,dOCUMENTTYPEUSTAX1099MISC,dOCUMENTTYPEUSTAX1099K
 */

enum class DocType(val value: kotlin.String) {

    @JsonProperty(value = "UNKNOWN")
    uNKNOWN("UNKNOWN"),

    @JsonProperty(value = "DOCUMENT_TYPE_PAYSTUB")
    dOCUMENTTYPEPAYSTUB("DOCUMENT_TYPE_PAYSTUB"),

    @JsonProperty(value = "DOCUMENT_TYPE_BANK_STATEMENT")
    dOCUMENTTYPEBANKSTATEMENT("DOCUMENT_TYPE_BANK_STATEMENT"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_TAX_W2")
    dOCUMENTTYPEUSTAXW2("DOCUMENT_TYPE_US_TAX_W2"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_MILITARY_ERAS")
    dOCUMENTTYPEUSMILITARYERAS("DOCUMENT_TYPE_US_MILITARY_ERAS"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_MILITARY_LES")
    dOCUMENTTYPEUSMILITARYLES("DOCUMENT_TYPE_US_MILITARY_LES"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_MILITARY_CLES")
    dOCUMENTTYPEUSMILITARYCLES("DOCUMENT_TYPE_US_MILITARY_CLES"),

    @JsonProperty(value = "DOCUMENT_TYPE_GIG")
    dOCUMENTTYPEGIG("DOCUMENT_TYPE_GIG"),

    @JsonProperty(value = "DOCUMENT_TYPE_NONE")
    dOCUMENTTYPENONE("DOCUMENT_TYPE_NONE"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_TAX_1099_MISC")
    dOCUMENTTYPEUSTAX1099MISC("DOCUMENT_TYPE_US_TAX_1099_MISC"),

    @JsonProperty(value = "DOCUMENT_TYPE_US_TAX_1099_K")
    dOCUMENTTYPEUSTAX1099K("DOCUMENT_TYPE_US_TAX_1099_K");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is DocType) "$data" else null

        /**
         * Returns a valid [DocType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): DocType? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

