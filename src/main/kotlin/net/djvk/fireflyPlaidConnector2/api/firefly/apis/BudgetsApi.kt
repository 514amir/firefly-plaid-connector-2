/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.firefly.apis

import com.fasterxml.jackson.databind.ObjectMapper
import io.ktor.client.*
import io.ktor.client.engine.*
import net.djvk.fireflyPlaidConnector2.api.firefly.infrastructure.*
import net.djvk.fireflyPlaidConnector2.api.firefly.models.*
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component

@Component
open class BudgetsApi(
    @Value("\${fireflyPlaidConnector2.firefly.url}")
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: ObjectMapper.() -> Unit = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

    /**
     * Delete a budget.
     * Delete a budget. Transactions will not be deleted.
     * @param id The ID of the budget.
     * @return void
     */
    open suspend fun deleteBudget(id: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/budgets/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Delete a budget limit.
     * Delete a budget limit.
     * @param id The ID of the budget. The budget limit MUST be associated to the budget ID.
     * @param limitId The ID of the budget limit. The budget limit MUST be associated to the budget ID.
     * @return void
     */
    open suspend fun deleteBudgetLimit(id: kotlin.String, limitId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/budgets/{id}/limits/{limitId}".replace("{" + "id" + "}", "$id")
                .replace("{" + "limitId" + "}", "$limitId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get a single budget.
     * Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
     * @param id The ID of the requested budget.
     * @param start A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)
     * @param end A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)
     * @return BudgetSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBudget(
        id: kotlin.String,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?
    ): HttpResponse<BudgetSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get single budget limit.
     *
     * @param id The ID of the budget. The budget limit MUST be associated to the budget ID.
     * @param limitId The ID of the budget limit. The budget limit MUST be associated to the budget ID.
     * @return BudgetLimitSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBudgetLimit(id: kotlin.String, limitId: kotlin.Int): HttpResponse<BudgetLimitSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}/limits/{limitId}".replace("{" + "id" + "}", "$id")
                .replace("{" + "limitId" + "}", "$limitId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Lists all attachments of a budget.
     * Lists all attachments.
     * @param id The ID of the budget.
     * @param page Page number. The default pagination is 50. (optional)
     * @return AttachmentArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listAttachmentByBudget(id: kotlin.String, page: kotlin.Int?): HttpResponse<AttachmentArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}/attachments".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List all budgets.
     * List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
     * @param page Page number. The default pagination is 50. (optional)
     * @param start A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)
     * @param end A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)
     * @return BudgetArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listBudget(
        page: kotlin.Int?,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?
    ): HttpResponse<BudgetArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get list of budget limits by date
     * Get all budget limits for for this date range.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @return BudgetLimitArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listBudgetLimit(
        start: java.time.LocalDate,
        end: java.time.LocalDate
    ): HttpResponse<BudgetLimitArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budget-limits",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get all limits for a budget.
     * Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself.
     * @param id The ID of the requested budget.
     * @param start A date formatted YYYY-MM-DD.  (optional)
     * @param end A date formatted YYYY-MM-DD.  (optional)
     * @return BudgetLimitArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listBudgetLimitByBudget(
        id: kotlin.String,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?
    ): HttpResponse<BudgetLimitArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}/limits".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * All transactions to a budget.
     * Get all transactions linked to a budget, possibly limited by start and end
     * @param id The ID of the budget.
     * @param limit Limits the number of results on one page. (optional)
     * @param page Page number. The default pagination is 50. (optional)
     * @param start A date formatted YYYY-MM-DD.  (optional)
     * @param end A date formatted YYYY-MM-DD.  (optional)
     * @param type Optional filter on the transaction type(s) returned (optional)
     * @return TransactionArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listTransactionByBudget(
        id: kotlin.String,
        limit: kotlin.Int?,
        page: kotlin.Int?,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?,
        type: TransactionTypeFilter?
    ): HttpResponse<TransactionArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}/transactions".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List all transactions by a budget limit ID.
     * List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
     * @param id The ID of the budget. The budget limit MUST be associated to the budget ID.
     * @param limitId The ID of the budget limit. The budget limit MUST be associated to the budget ID.
     * @param page Page number. The default pagination is 50. (optional)
     * @param type Optional filter on the transaction type(s) returned (optional)
     * @return TransactionArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listTransactionByBudgetLimit(
        id: kotlin.String,
        limitId: kotlin.String,
        page: kotlin.Int?,
        type: TransactionTypeFilter?
    ): HttpResponse<TransactionArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/{id}/limits/{limitId}/transactions".replace("{" + "id" + "}", "$id")
                .replace("{" + "limitId" + "}", "$limitId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * All transactions without a budget.
     * Get all transactions without a budget, possibly limited by start and end
     * @param limit Limits the number of results on one page. (optional)
     * @param page Page number. The default pagination is 50. (optional)
     * @param start A date formatted YYYY-MM-DD.  (optional)
     * @param end A date formatted YYYY-MM-DD.  (optional)
     * @param type Optional filter on the transaction type(s) returned (optional)
     * @return TransactionArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listTransactionWithoutBudget(
        limit: kotlin.Int?,
        page: kotlin.Int?,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?,
        type: TransactionTypeFilter?
    ): HttpResponse<TransactionArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/budgets/transactions-without-budget",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Store a new budget
     * Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
     * @param budgetStore JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.
     * @return BudgetSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun storeBudget(budgetStore: BudgetStore): HttpResponse<BudgetSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = budgetStore

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/budgets",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Store new budget limit.
     * Store a new budget limit under this budget.
     * @param id The ID of the budget.
     * @param budgetLimitStore JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.
     * @return BudgetLimitSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun storeBudgetLimit(
        id: kotlin.String,
        budgetLimitStore: BudgetLimitStore
    ): HttpResponse<BudgetLimitSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = budgetLimitStore

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/budgets/{id}/limits".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update existing budget.
     * Update existing budget. This endpoint cannot be used to set budget amount limits.
     * @param id The ID of the budget.
     * @param budgetUpdate JSON array with updated budget information. See the model for the exact specifications.
     * @return BudgetSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateBudget(id: kotlin.String, budgetUpdate: BudgetUpdate): HttpResponse<BudgetSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = budgetUpdate

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/budgets/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update existing budget limit.
     * Update existing budget limit.
     * @param id The ID of the budget. The budget limit MUST be associated to the budget ID.
     * @param limitId The ID of the budget limit. The budget limit MUST be associated to the budget ID.
     * @param budgetLimit JSON array with updated budget limit information. See the model for the exact specifications.
     * @return BudgetLimitSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateBudgetLimit(
        id: kotlin.String,
        limitId: kotlin.String,
        budgetLimit: BudgetLimit
    ): HttpResponse<BudgetLimitSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = budgetLimit

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/budgets/{id}/limits/{limitId}".replace("{" + "id" + "}", "$id")
                .replace("{" + "limitId" + "}", "$limitId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
