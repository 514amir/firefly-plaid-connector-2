/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.firefly.apis

import com.fasterxml.jackson.databind.ObjectMapper
import io.ktor.client.*
import io.ktor.client.engine.*
import net.djvk.fireflyPlaidConnector2.api.firefly.infrastructure.*
import net.djvk.fireflyPlaidConnector2.api.firefly.models.*
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component

@Component
open class AccountsApi(
    @Value("\${fireflyPlaidConnector2.firefly.url}")
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: ObjectMapper.() -> Unit = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

    /**
     * Permanently delete account.
     * Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.
     * @param id The ID of the account.
     * @return void
     */
    open suspend fun deleteAccount(id: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/accounts/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get single account.
     * Returns a single account by its ID.
     * @param id The ID of the account.
     * @param date A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)
     * @return AccountSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAccount(id: kotlin.String, date: java.time.LocalDate?): HttpResponse<AccountSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        date?.apply { localVariableQuery["date"] = listOf("$date") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List all accounts.
     * This endpoint returns a list of all the accounts owned by the authenticated user.
     * @param page Page number. The default pagination is per 50 items. (optional)
     * @param date A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)
     * @param type Optional filter on the account type(s) returned (optional)
     * @return AccountArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listAccount(
        page: kotlin.Int?,
        date: java.time.LocalDate?,
        type: AccountTypeFilter?
    ): HttpResponse<AccountArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Lists all attachments.
     * Lists all attachments.
     * @param id The ID of the account.
     * @param page Page number. The default pagination is 50. (optional)
     * @return AttachmentArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listAttachmentByAccount(id: kotlin.String, page: kotlin.Int?): HttpResponse<AttachmentArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts/{id}/attachments".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List all piggy banks related to the account.
     * This endpoint returns a list of all the piggy banks connected to the account.
     * @param id The ID of the account.
     * @param page Page number. The default pagination is per 50 items. (optional)
     * @return PiggyBankArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listPiggyBankByAccount(id: kotlin.String, page: kotlin.Int?): HttpResponse<PiggyBankArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts/{id}/piggy_banks".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List all transactions related to the account.
     * This endpoint returns a list of all the transactions connected to the account.
     * @param id The ID of the account.
     * @param page Page number. The default pagination is per 50 items. (optional)
     * @param limit Limits the number of results on one page. (optional)
     * @param start A date formatted YYYY-MM-DD.  (optional)
     * @param end A date formatted YYYY-MM-DD.  (optional)
     * @param type Optional filter on the transaction type(s) returned. (optional)
     * @return TransactionArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listTransactionByAccount(
        id: kotlin.String,
        page: kotlin.Int?,
        limit: kotlin.Int?,
        start: java.time.LocalDate?,
        end: java.time.LocalDate?,
        type: TransactionTypeFilter?
    ): HttpResponse<TransactionArray> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/accounts/{id}/transactions".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create new account.
     * Creates a new account. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
     * @param accountStore JSON array with the necessary account information or key&#x3D;value pairs. See the model for the exact specifications.
     * @return AccountSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun storeAccount(accountStore: AccountStore): HttpResponse<AccountSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = accountStore

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update existing account.
     * Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.
     * @param id The ID of the account.
     * @param accountUpdate JSON array or formdata with updated account information. See the model for the exact specifications.
     * @return AccountSingle
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateAccount(id: kotlin.String, accountUpdate: AccountUpdate): HttpResponse<AccountSingle> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody = accountUpdate

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v1/accounts/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
