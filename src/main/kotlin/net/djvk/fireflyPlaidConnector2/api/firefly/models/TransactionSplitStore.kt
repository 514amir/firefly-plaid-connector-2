/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.firefly.models

import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 *
 * @param type
 * @param date Date of the transaction
 * @param amount Amount of the transaction.
 * @param description Description of the transaction.
 * @param order Order of this entry in the list of transactions.
 * @param currencyId Currency ID. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.
 * @param currencyCode Currency code. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.
 * @param foreignAmount The amount in a foreign currency.
 * @param foreignCurrencyId Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
 * @param foreignCurrencyCode Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
 * @param budgetId The budget ID for this transaction.
 * @param budgetName The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
 * @param categoryId The category ID for this transaction.
 * @param categoryName The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
 * @param sourceId ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
 * @param sourceName Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
 * @param destinationId ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
 * @param destinationName Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
 * @param reconciled If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
 * @param piggyBankId Optional. Use either this or the piggy_bank_name
 * @param piggyBankName Optional. Use either this or the piggy_bank_id
 * @param billId Optional. Use either this or the bill_name
 * @param billName Optional. Use either this or the bill_id
 * @param tags Array of tags.
 * @param notes
 * @param internalReference Reference to internal reference of other systems.
 * @param externalId Reference to external ID in other systems.
 * @param externalUrl External, custom URL for this transaction.
 * @param bunqPaymentId Internal ID of bunq transaction. Field is no longer used but still works.
 * @param sepaCc SEPA Clearing Code
 * @param sepaCtOp SEPA Opposing Account Identifier
 * @param sepaCtId SEPA end-to-end Identifier
 * @param sepaDb SEPA mandate identifier
 * @param sepaCountry SEPA Country
 * @param sepaEp SEPA External Purpose indicator
 * @param sepaCi SEPA Creditor Identifier
 * @param sepaBatchId SEPA Batch ID
 * @param interestDate
 * @param bookDate
 * @param processDate
 * @param dueDate
 * @param paymentDate
 * @param invoiceDate
 */

data class TransactionSplitStore(

    @field:JsonProperty("type")
    val type: TransactionTypeProperty,

    /* Date of the transaction */
    @field:JsonProperty("date")
    val date: java.time.OffsetDateTime,

    /* Amount of the transaction. */
    @field:JsonProperty("amount")
    val amount: kotlin.String,

    /* Description of the transaction. */
    @field:JsonProperty("description")
    val description: kotlin.String,

    /* Order of this entry in the list of transactions. */
    @field:JsonProperty("order")
    val order: kotlin.Int? = null,

    /* Currency ID. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account. */
    @field:JsonProperty("currency_id")
    val currencyId: kotlin.String? = null,

    /* Currency code. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account. */
    @field:JsonProperty("currency_code")
    val currencyCode: kotlin.String? = null,

    /* The amount in a foreign currency. */
    @field:JsonProperty("foreign_amount")
    val foreignAmount: kotlin.Int? = null,

    /* Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount. */
    @field:JsonProperty("foreign_currency_id")
    val foreignCurrencyId: kotlin.String? = null,

    /* Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount. */
    @field:JsonProperty("foreign_currency_code")
    val foreignCurrencyCode: kotlin.String? = null,

    /* The budget ID for this transaction. */
    @field:JsonProperty("budget_id")
    val budgetId: kotlin.String? = null,

    /* The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored. */
    @field:JsonProperty("budget_name")
    val budgetName: kotlin.String? = null,

    /* The category ID for this transaction. */
    @field:JsonProperty("category_id")
    val categoryId: kotlin.String? = null,

    /* The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name. */
    @field:JsonProperty("category_name")
    val categoryName: kotlin.String? = null,

    /* ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. */
    @field:JsonProperty("source_id")
    val sourceId: kotlin.String? = null,

    /* Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name. */
    @field:JsonProperty("source_name")
    val sourceName: kotlin.String? = null,

    /* ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account. */
    @field:JsonProperty("destination_id")
    val destinationId: kotlin.String? = null,

    /* Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough. */
    @field:JsonProperty("destination_name")
    val destinationName: kotlin.String? = null,

    /* If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user. */
    @field:JsonProperty("reconciled")
    val reconciled: kotlin.Boolean? = null,

    /* Optional. Use either this or the piggy_bank_name */
    @field:JsonProperty("piggy_bank_id")
    val piggyBankId: kotlin.Int? = null,

    /* Optional. Use either this or the piggy_bank_id */
    @field:JsonProperty("piggy_bank_name")
    val piggyBankName: kotlin.String? = null,

    /* Optional. Use either this or the bill_name */
    @field:JsonProperty("bill_id")
    val billId: kotlin.String? = null,

    /* Optional. Use either this or the bill_id */
    @field:JsonProperty("bill_name")
    val billName: kotlin.String? = null,

    /* Array of tags. */
    @field:JsonProperty("tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @field:JsonProperty("notes")
    val notes: kotlin.String? = null,

    /* Reference to internal reference of other systems. */
    @field:JsonProperty("internal_reference")
    val internalReference: kotlin.String? = null,

    /* Reference to external ID in other systems. */
    @field:JsonProperty("external_id")
    val externalId: kotlin.String? = null,

    /* External, custom URL for this transaction. */
    @field:JsonProperty("external_url")
    val externalUrl: kotlin.String? = null,

    /* Internal ID of bunq transaction. Field is no longer used but still works. */
    @field:JsonProperty("bunq_payment_id")
    val bunqPaymentId: kotlin.String? = null,

    /* SEPA Clearing Code */
    @field:JsonProperty("sepa_cc")
    val sepaCc: kotlin.String? = null,

    /* SEPA Opposing Account Identifier */
    @field:JsonProperty("sepa_ct_op")
    val sepaCtOp: kotlin.String? = null,

    /* SEPA end-to-end Identifier */
    @field:JsonProperty("sepa_ct_id")
    val sepaCtId: kotlin.String? = null,

    /* SEPA mandate identifier */
    @field:JsonProperty("sepa_db")
    val sepaDb: kotlin.String? = null,

    /* SEPA Country */
    @field:JsonProperty("sepa_country")
    val sepaCountry: kotlin.String? = null,

    /* SEPA External Purpose indicator */
    @field:JsonProperty("sepa_ep")
    val sepaEp: kotlin.String? = null,

    /* SEPA Creditor Identifier */
    @field:JsonProperty("sepa_ci")
    val sepaCi: kotlin.String? = null,

    /* SEPA Batch ID */
    @field:JsonProperty("sepa_batch_id")
    val sepaBatchId: kotlin.String? = null,

    @field:JsonProperty("interest_date")
    val interestDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("book_date")
    val bookDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("process_date")
    val processDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("due_date")
    val dueDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("payment_date")
    val paymentDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("invoice_date")
    val invoiceDate: java.time.OffsetDateTime? = null

)

