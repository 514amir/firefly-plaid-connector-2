/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts
 *
 * Values: adjustment,atm,bankCharge,billPayment,cash,cashback,cheque,directDebit,interest,purchase,standingOrder,transfer,`null`
 */

enum class TransactionCode(val value: kotlin.String) {

    @JsonProperty(value = "adjustment")
    adjustment("adjustment"),

    @JsonProperty(value = "atm")
    atm("atm"),

    @JsonProperty(value = "bank charge")
    bankCharge("bank charge"),

    @JsonProperty(value = "bill payment")
    billPayment("bill payment"),

    @JsonProperty(value = "cash")
    cash("cash"),

    @JsonProperty(value = "cashback")
    cashback("cashback"),

    @JsonProperty(value = "cheque")
    cheque("cheque"),

    @JsonProperty(value = "direct debit")
    directDebit("direct debit"),

    @JsonProperty(value = "interest")
    interest("interest"),

    @JsonProperty(value = "purchase")
    purchase("purchase"),

    @JsonProperty(value = "standing order")
    standingOrder("standing order"),

    @JsonProperty(value = "transfer")
    transfer("transfer"),

    @JsonProperty(value = "null")
    `null`("null");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TransactionCode) "$data" else null

        /**
         * Returns a valid [TransactionCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TransactionCode? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

