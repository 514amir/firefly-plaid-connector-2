/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Specify the list of investments transactions on the account.
 *
 * @param date Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
 * @param name The institution's description of the transaction.
 * @param quantity The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
 * @param price The price of the security at which this transaction occurred.
 * @param type The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
 * @param currency Either a valid `iso_currency_code` or `unofficial_currency_code`
 * @param fees The combined value of all fees applied to this transaction.
 * @param security
 */

data class InvestmentsTransactionsOverride(

    /* Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date. */
    @field:JsonProperty("date")
    val date: java.time.LocalDate,

    /* The institution's description of the transaction. */
    @field:JsonProperty("name")
    val name: kotlin.String,

    /* The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell. */
    @field:JsonProperty("quantity")
    val quantity: kotlin.Double,

    /* The price of the security at which this transaction occurred. */
    @field:JsonProperty("price")
    val price: kotlin.Double,

    /* The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer */
    @field:JsonProperty("type")
    val type: kotlin.String,

    /* Either a valid `iso_currency_code` or `unofficial_currency_code` */
    @field:JsonProperty("currency")
    val currency: kotlin.String,

    /* The combined value of all fees applied to this transaction. */
    @field:JsonProperty("fees")
    val fees: kotlin.Double? = null,

    @field:JsonProperty("security")
    val security: SecurityOverride? = null

)

