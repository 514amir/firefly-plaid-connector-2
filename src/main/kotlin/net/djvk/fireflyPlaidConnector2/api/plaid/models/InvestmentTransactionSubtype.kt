/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
 *
 * Values: accountFee,adjustment,assignment,buy,buyToCover,contribution,deposit,distribution,dividend,dividendReinvestment,exercise,expire,fundFee,interest,interestReceivable,interestReinvestment,legalFee,loanPayment,longMinusTermCapitalGain,longMinusTermCapitalGainReinvestment,managementFee,marginExpense,merger,miscellaneousFee,nonMinusQualifiedDividend,nonMinusResidentTax,pendingCredit,pendingDebit,qualifiedDividend,rebalance,returnOfPrincipal,request,sell,sellShort,send,shortMinusTermCapitalGain,shortMinusTermCapitalGainReinvestment,spinOff,split,stockDistribution,tax,taxWithheld,transfer,transferFee,trustFee,unqualifiedGain,withdrawal
 */

enum class InvestmentTransactionSubtype(val value: kotlin.String) {

    @JsonProperty(value = "account fee")
    accountFee("account fee"),

    @JsonProperty(value = "adjustment")
    adjustment("adjustment"),

    @JsonProperty(value = "assignment")
    assignment("assignment"),

    @JsonProperty(value = "buy")
    buy("buy"),

    @JsonProperty(value = "buy to cover")
    buyToCover("buy to cover"),

    @JsonProperty(value = "contribution")
    contribution("contribution"),

    @JsonProperty(value = "deposit")
    deposit("deposit"),

    @JsonProperty(value = "distribution")
    distribution("distribution"),

    @JsonProperty(value = "dividend")
    dividend("dividend"),

    @JsonProperty(value = "dividend reinvestment")
    dividendReinvestment("dividend reinvestment"),

    @JsonProperty(value = "exercise")
    exercise("exercise"),

    @JsonProperty(value = "expire")
    expire("expire"),

    @JsonProperty(value = "fund fee")
    fundFee("fund fee"),

    @JsonProperty(value = "interest")
    interest("interest"),

    @JsonProperty(value = "interest receivable")
    interestReceivable("interest receivable"),

    @JsonProperty(value = "interest reinvestment")
    interestReinvestment("interest reinvestment"),

    @JsonProperty(value = "legal fee")
    legalFee("legal fee"),

    @JsonProperty(value = "loan payment")
    loanPayment("loan payment"),

    @JsonProperty(value = "long-term capital gain")
    longMinusTermCapitalGain("long-term capital gain"),

    @JsonProperty(value = "long-term capital gain reinvestment")
    longMinusTermCapitalGainReinvestment("long-term capital gain reinvestment"),

    @JsonProperty(value = "management fee")
    managementFee("management fee"),

    @JsonProperty(value = "margin expense")
    marginExpense("margin expense"),

    @JsonProperty(value = "merger")
    merger("merger"),

    @JsonProperty(value = "miscellaneous fee")
    miscellaneousFee("miscellaneous fee"),

    @JsonProperty(value = "non-qualified dividend")
    nonMinusQualifiedDividend("non-qualified dividend"),

    @JsonProperty(value = "non-resident tax")
    nonMinusResidentTax("non-resident tax"),

    @JsonProperty(value = "pending credit")
    pendingCredit("pending credit"),

    @JsonProperty(value = "pending debit")
    pendingDebit("pending debit"),

    @JsonProperty(value = "qualified dividend")
    qualifiedDividend("qualified dividend"),

    @JsonProperty(value = "rebalance")
    rebalance("rebalance"),

    @JsonProperty(value = "return of principal")
    returnOfPrincipal("return of principal"),

    @JsonProperty(value = "request")
    request("request"),

    @JsonProperty(value = "sell")
    sell("sell"),

    @JsonProperty(value = "sell short")
    sellShort("sell short"),

    @JsonProperty(value = "send")
    send("send"),

    @JsonProperty(value = "short-term capital gain")
    shortMinusTermCapitalGain("short-term capital gain"),

    @JsonProperty(value = "short-term capital gain reinvestment")
    shortMinusTermCapitalGainReinvestment("short-term capital gain reinvestment"),

    @JsonProperty(value = "spin off")
    spinOff("spin off"),

    @JsonProperty(value = "split")
    split("split"),

    @JsonProperty(value = "stock distribution")
    stockDistribution("stock distribution"),

    @JsonProperty(value = "tax")
    tax("tax"),

    @JsonProperty(value = "tax withheld")
    taxWithheld("tax withheld"),

    @JsonProperty(value = "transfer")
    transfer("transfer"),

    @JsonProperty(value = "transfer fee")
    transferFee("transfer fee"),

    @JsonProperty(value = "trust fee")
    trustFee("trust fee"),

    @JsonProperty(value = "unqualified gain")
    unqualifiedGain("unqualified gain"),

    @JsonProperty(value = "withdrawal")
    withdrawal("withdrawal");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is InvestmentTransactionSubtype) "$data" else null

        /**
         * Returns a valid [InvestmentTransactionSubtype] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): InvestmentTransactionSubtype? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

