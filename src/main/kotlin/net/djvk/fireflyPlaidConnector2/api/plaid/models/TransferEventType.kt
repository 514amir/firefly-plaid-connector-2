/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The type of event that this transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `returned`: A posted transfer was returned.  `swept`: The transfer was swept to / from the sweep account.  `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
 *
 * Values: pending,cancelled,failed,posted,returned,swept,reverseSwept,returnSwept
 */

enum class TransferEventType(val value: kotlin.String) {

    @JsonProperty(value = "pending")
    pending("pending"),

    @JsonProperty(value = "cancelled")
    cancelled("cancelled"),

    @JsonProperty(value = "failed")
    failed("failed"),

    @JsonProperty(value = "posted")
    posted("posted"),

    @JsonProperty(value = "returned")
    returned("returned"),

    @JsonProperty(value = "swept")
    swept("swept"),

    @JsonProperty(value = "reverse_swept")
    reverseSwept("reverse_swept"),

    @JsonProperty(value = "return_swept")
    returnSwept("return_swept");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TransferEventType) "$data" else null

        /**
         * Returns a valid [TransferEventType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TransferEventType? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

