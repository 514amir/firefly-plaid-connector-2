/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Asset Transaction Category Type Enumerated derived by Vendor.
 *
 * Values: aTMFee,advertising,airTravel,alcoholBars,allowance,amusement,arts,autoTransport,autoInsurance,autoPayment,babySupplies,babysitterDaycare,bankFee,billsUtilities,bonus,booksSupplies,businessServices,buy,cashATM,charity,check,childSupport,clothing,coffeeShops,creditCardPayment,dentist,doctor,education,electronicsSoftware,entertainment,eyecare,fastFood,federalTax,feesCharges,financeCharge,financial,financialAdvisor,foodDining,furnishings,gasFuel,giftsDonations,groceries,gym,hair,healthFitness,healthInsurance,hobbies,home,homeImprovement,homeInsurance,homePhone,homeServices,homeSupplies,hotel,income,interestIncome,internet,investments,kids,kidsActivities,lateFee,laundry,lawnGarden,legal,lifeInsurance,loanInsurance,loanPayment,loans,mobilePhone,mortgageRent,moviesDVDs,music,newspapersMagazines,officeSupplies,parking,paycheck,personalCare,petFoodSupplies,petGrooming,pets,pharmacy,printing,propertyTax,publicTransportation,reimbursement,rentalCarTaxi,restaurants,salesTax,serviceParts,serviceFee,shipping,shopping,spaMassage,sportingGoods,sports,stateTax,studentLoan,taxes,television,toys,transfer,travel,tuition,uncategorized,utilities,vacation,veterinary
 */

enum class AssetTransactionCategoryType(val value: kotlin.String) {

    @JsonProperty(value = "ATMFee")
    aTMFee("ATMFee"),

    @JsonProperty(value = "Advertising")
    advertising("Advertising"),

    @JsonProperty(value = "AirTravel")
    airTravel("AirTravel"),

    @JsonProperty(value = "AlcoholBars")
    alcoholBars("AlcoholBars"),

    @JsonProperty(value = "Allowance")
    allowance("Allowance"),

    @JsonProperty(value = "Amusement")
    amusement("Amusement"),

    @JsonProperty(value = "Arts")
    arts("Arts"),

    @JsonProperty(value = "AutoTransport")
    autoTransport("AutoTransport"),

    @JsonProperty(value = "AutoInsurance")
    autoInsurance("AutoInsurance"),

    @JsonProperty(value = "AutoPayment")
    autoPayment("AutoPayment"),

    @JsonProperty(value = "BabySupplies")
    babySupplies("BabySupplies"),

    @JsonProperty(value = "BabysitterDaycare")
    babysitterDaycare("BabysitterDaycare"),

    @JsonProperty(value = "BankFee")
    bankFee("BankFee"),

    @JsonProperty(value = "BillsUtilities")
    billsUtilities("BillsUtilities"),

    @JsonProperty(value = "Bonus")
    bonus("Bonus"),

    @JsonProperty(value = "BooksSupplies")
    booksSupplies("BooksSupplies"),

    @JsonProperty(value = "Business Services")
    businessServices("Business Services"),

    @JsonProperty(value = "Buy")
    buy("Buy"),

    @JsonProperty(value = "CashATM")
    cashATM("CashATM"),

    @JsonProperty(value = "Charity")
    charity("Charity"),

    @JsonProperty(value = "Check")
    check("Check"),

    @JsonProperty(value = "ChildSupport")
    childSupport("ChildSupport"),

    @JsonProperty(value = "Clothing")
    clothing("Clothing"),

    @JsonProperty(value = "CoffeeShops")
    coffeeShops("CoffeeShops"),

    @JsonProperty(value = "CreditCardPayment")
    creditCardPayment("CreditCardPayment"),

    @JsonProperty(value = "Dentist")
    dentist("Dentist"),

    @JsonProperty(value = "Doctor")
    doctor("Doctor"),

    @JsonProperty(value = "Education")
    education("Education"),

    @JsonProperty(value = "ElectronicsSoftware")
    electronicsSoftware("ElectronicsSoftware"),

    @JsonProperty(value = "Entertainment")
    entertainment("Entertainment"),

    @JsonProperty(value = "Eyecare")
    eyecare("Eyecare"),

    @JsonProperty(value = "FastFood")
    fastFood("FastFood"),

    @JsonProperty(value = "FederalTax")
    federalTax("FederalTax"),

    @JsonProperty(value = "FeesCharges")
    feesCharges("FeesCharges"),

    @JsonProperty(value = "FinanceCharge")
    financeCharge("FinanceCharge"),

    @JsonProperty(value = "Financial")
    financial("Financial"),

    @JsonProperty(value = "FinancialAdvisor")
    financialAdvisor("FinancialAdvisor"),

    @JsonProperty(value = "FoodDining")
    foodDining("FoodDining"),

    @JsonProperty(value = "Furnishings")
    furnishings("Furnishings"),

    @JsonProperty(value = "GasFuel")
    gasFuel("GasFuel"),

    @JsonProperty(value = "GiftsDonations")
    giftsDonations("GiftsDonations"),

    @JsonProperty(value = "Groceries")
    groceries("Groceries"),

    @JsonProperty(value = "Gym")
    gym("Gym"),

    @JsonProperty(value = "Hair")
    hair("Hair"),

    @JsonProperty(value = "HealthFitness")
    healthFitness("HealthFitness"),

    @JsonProperty(value = "HealthInsurance")
    healthInsurance("HealthInsurance"),

    @JsonProperty(value = "Hobbies")
    hobbies("Hobbies"),

    @JsonProperty(value = "Home")
    home("Home"),

    @JsonProperty(value = "HomeImprovement")
    homeImprovement("HomeImprovement"),

    @JsonProperty(value = "HomeInsurance")
    homeInsurance("HomeInsurance"),

    @JsonProperty(value = "HomePhone")
    homePhone("HomePhone"),

    @JsonProperty(value = "HomeServices")
    homeServices("HomeServices"),

    @JsonProperty(value = "HomeSupplies")
    homeSupplies("HomeSupplies"),

    @JsonProperty(value = "Hotel")
    hotel("Hotel"),

    @JsonProperty(value = "Income")
    income("Income"),

    @JsonProperty(value = "InterestIncome")
    interestIncome("InterestIncome"),

    @JsonProperty(value = "Internet")
    internet("Internet"),

    @JsonProperty(value = "Investments")
    investments("Investments"),

    @JsonProperty(value = "Kids")
    kids("Kids"),

    @JsonProperty(value = "KidsActivities")
    kidsActivities("KidsActivities"),

    @JsonProperty(value = "LateFee")
    lateFee("LateFee"),

    @JsonProperty(value = "Laundry")
    laundry("Laundry"),

    @JsonProperty(value = "LawnGarden")
    lawnGarden("LawnGarden"),

    @JsonProperty(value = "Legal")
    legal("Legal"),

    @JsonProperty(value = "LifeInsurance")
    lifeInsurance("LifeInsurance"),

    @JsonProperty(value = "LoanInsurance")
    loanInsurance("LoanInsurance"),

    @JsonProperty(value = "LoanPayment")
    loanPayment("LoanPayment"),

    @JsonProperty(value = "Loans")
    loans("Loans"),

    @JsonProperty(value = "MobilePhone")
    mobilePhone("MobilePhone"),

    @JsonProperty(value = "MortgageRent")
    mortgageRent("MortgageRent"),

    @JsonProperty(value = "MoviesDVDs")
    moviesDVDs("MoviesDVDs"),

    @JsonProperty(value = "Music")
    music("Music"),

    @JsonProperty(value = "NewspapersMagazines")
    newspapersMagazines("NewspapersMagazines"),

    @JsonProperty(value = "OfficeSupplies")
    officeSupplies("OfficeSupplies"),

    @JsonProperty(value = "Parking")
    parking("Parking"),

    @JsonProperty(value = "Paycheck")
    paycheck("Paycheck"),

    @JsonProperty(value = "PersonalCare")
    personalCare("PersonalCare"),

    @JsonProperty(value = "PetFoodSupplies")
    petFoodSupplies("PetFoodSupplies"),

    @JsonProperty(value = "PetGrooming")
    petGrooming("PetGrooming"),

    @JsonProperty(value = "Pets")
    pets("Pets"),

    @JsonProperty(value = "Pharmacy")
    pharmacy("Pharmacy"),

    @JsonProperty(value = "Printing")
    printing("Printing"),

    @JsonProperty(value = "Property Tax")
    propertyTax("Property Tax"),

    @JsonProperty(value = "Public Transportation")
    publicTransportation("Public Transportation"),

    @JsonProperty(value = "Reimbursement")
    reimbursement("Reimbursement"),

    @JsonProperty(value = "RentalCarTaxi")
    rentalCarTaxi("RentalCarTaxi"),

    @JsonProperty(value = "Restaurants")
    restaurants("Restaurants"),

    @JsonProperty(value = "SalesTax")
    salesTax("SalesTax"),

    @JsonProperty(value = "ServiceParts")
    serviceParts("ServiceParts"),

    @JsonProperty(value = "ServiceFee")
    serviceFee("ServiceFee"),

    @JsonProperty(value = "Shipping")
    shipping("Shipping"),

    @JsonProperty(value = "Shopping")
    shopping("Shopping"),

    @JsonProperty(value = "SpaMassage")
    spaMassage("SpaMassage"),

    @JsonProperty(value = "SportingGoods")
    sportingGoods("SportingGoods"),

    @JsonProperty(value = "Sports")
    sports("Sports"),

    @JsonProperty(value = "StateTax")
    stateTax("StateTax"),

    @JsonProperty(value = "Student Loan")
    studentLoan("Student Loan"),

    @JsonProperty(value = "Taxes")
    taxes("Taxes"),

    @JsonProperty(value = "Television")
    television("Television"),

    @JsonProperty(value = "Toys")
    toys("Toys"),

    @JsonProperty(value = "Transfer")
    transfer("Transfer"),

    @JsonProperty(value = "Travel")
    travel("Travel"),

    @JsonProperty(value = "Tuition")
    tuition("Tuition"),

    @JsonProperty(value = "Uncategorized")
    uncategorized("Uncategorized"),

    @JsonProperty(value = "Utilities")
    utilities("Utilities"),

    @JsonProperty(value = "Vacation")
    vacation("Vacation"),

    @JsonProperty(value = "Veterinary")
    veterinary("Veterinary");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is AssetTransactionCategoryType) "$data" else null

        /**
         * Returns a valid [AssetTransactionCategoryType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): AssetTransactionCategoryType? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

