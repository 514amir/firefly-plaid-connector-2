/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
 *
 * Values: _401a,_401k,_403b,_457b,_529,brokerage,cashIsa,cryptoExchange,educationSavingsAccount,ebt,fixedAnnuity,gic,healthReimbursementArrangement,hsa,isa,ira,lif,lifeInsurance,lira,lrif,lrsp,nonMinusTaxableBrokerageAccount,other,otherInsurance,otherAnnuity,prif,rdsp,resp,rlif,rrif,pension,profitSharingPlan,retirement,roth,roth401k,rrsp,sepIra,simpleIra,sipp,stockPlan,thriftSavingsPlan,tfsa,trust,ugma,utma,variableAnnuity,creditCard,paypal,cd,checking,savings,moneyMarket,prepaid,auto,business,commercial,construction,consumer,homeEquity,loan,mortgage,overdraft,lineOfCredit,student,cashManagement,keogh,mutualFund,recurring,rewards,safeDeposit,sarsep,payroll,`null`
 */

enum class AccountSubtype(val value: kotlin.String) {

    @JsonProperty(value = "401a")
    _401a("401a"),

    @JsonProperty(value = "401k")
    _401k("401k"),

    @JsonProperty(value = "403B")
    _403b("403B"),

    @JsonProperty(value = "457b")
    _457b("457b"),

    @JsonProperty(value = "529")
    _529("529"),

    @JsonProperty(value = "brokerage")
    brokerage("brokerage"),

    @JsonProperty(value = "cash isa")
    cashIsa("cash isa"),

    @JsonProperty(value = "crypto exchange")
    cryptoExchange("crypto exchange"),

    @JsonProperty(value = "education savings account")
    educationSavingsAccount("education savings account"),

    @JsonProperty(value = "ebt")
    ebt("ebt"),

    @JsonProperty(value = "fixed annuity")
    fixedAnnuity("fixed annuity"),

    @JsonProperty(value = "gic")
    gic("gic"),

    @JsonProperty(value = "health reimbursement arrangement")
    healthReimbursementArrangement("health reimbursement arrangement"),

    @JsonProperty(value = "hsa")
    hsa("hsa"),

    @JsonProperty(value = "isa")
    isa("isa"),

    @JsonProperty(value = "ira")
    ira("ira"),

    @JsonProperty(value = "lif")
    lif("lif"),

    @JsonProperty(value = "life insurance")
    lifeInsurance("life insurance"),

    @JsonProperty(value = "lira")
    lira("lira"),

    @JsonProperty(value = "lrif")
    lrif("lrif"),

    @JsonProperty(value = "lrsp")
    lrsp("lrsp"),

    @JsonProperty(value = "non-taxable brokerage account")
    nonMinusTaxableBrokerageAccount("non-taxable brokerage account"),

    @JsonProperty(value = "other")
    other("other"),

    @JsonProperty(value = "other insurance")
    otherInsurance("other insurance"),

    @JsonProperty(value = "other annuity")
    otherAnnuity("other annuity"),

    @JsonProperty(value = "prif")
    prif("prif"),

    @JsonProperty(value = "rdsp")
    rdsp("rdsp"),

    @JsonProperty(value = "resp")
    resp("resp"),

    @JsonProperty(value = "rlif")
    rlif("rlif"),

    @JsonProperty(value = "rrif")
    rrif("rrif"),

    @JsonProperty(value = "pension")
    pension("pension"),

    @JsonProperty(value = "profit sharing plan")
    profitSharingPlan("profit sharing plan"),

    @JsonProperty(value = "retirement")
    retirement("retirement"),

    @JsonProperty(value = "roth")
    roth("roth"),

    @JsonProperty(value = "roth 401k")
    roth401k("roth 401k"),

    @JsonProperty(value = "rrsp")
    rrsp("rrsp"),

    @JsonProperty(value = "sep ira")
    sepIra("sep ira"),

    @JsonProperty(value = "simple ira")
    simpleIra("simple ira"),

    @JsonProperty(value = "sipp")
    sipp("sipp"),

    @JsonProperty(value = "stock plan")
    stockPlan("stock plan"),

    @JsonProperty(value = "thrift savings plan")
    thriftSavingsPlan("thrift savings plan"),

    @JsonProperty(value = "tfsa")
    tfsa("tfsa"),

    @JsonProperty(value = "trust")
    trust("trust"),

    @JsonProperty(value = "ugma")
    ugma("ugma"),

    @JsonProperty(value = "utma")
    utma("utma"),

    @JsonProperty(value = "variable annuity")
    variableAnnuity("variable annuity"),

    @JsonProperty(value = "credit card")
    creditCard("credit card"),

    @JsonProperty(value = "paypal")
    paypal("paypal"),

    @JsonProperty(value = "cd")
    cd("cd"),

    @JsonProperty(value = "checking")
    checking("checking"),

    @JsonProperty(value = "savings")
    savings("savings"),

    @JsonProperty(value = "money market")
    moneyMarket("money market"),

    @JsonProperty(value = "prepaid")
    prepaid("prepaid"),

    @JsonProperty(value = "auto")
    auto("auto"),

    @JsonProperty(value = "business")
    business("business"),

    @JsonProperty(value = "commercial")
    commercial("commercial"),

    @JsonProperty(value = "construction")
    construction("construction"),

    @JsonProperty(value = "consumer")
    consumer("consumer"),

    @JsonProperty(value = "home equity")
    homeEquity("home equity"),

    @JsonProperty(value = "loan")
    loan("loan"),

    @JsonProperty(value = "mortgage")
    mortgage("mortgage"),

    @JsonProperty(value = "overdraft")
    overdraft("overdraft"),

    @JsonProperty(value = "line of credit")
    lineOfCredit("line of credit"),

    @JsonProperty(value = "student")
    student("student"),

    @JsonProperty(value = "cash management")
    cashManagement("cash management"),

    @JsonProperty(value = "keogh")
    keogh("keogh"),

    @JsonProperty(value = "mutual fund")
    mutualFund("mutual fund"),

    @JsonProperty(value = "recurring")
    recurring("recurring"),

    @JsonProperty(value = "rewards")
    rewards("rewards"),

    @JsonProperty(value = "safe deposit")
    safeDeposit("safe deposit"),

    @JsonProperty(value = "sarsep")
    sarsep("sarsep"),

    @JsonProperty(value = "payroll")
    payroll("payroll"),

    @JsonProperty(value = "null")
    `null`("null");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is AccountSubtype) "$data" else null

        /**
         * Returns a valid [AccountSubtype] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): AccountSubtype? = data?.let {
            val normalizedData = "$it".lowercase()
            values().firstOrNull { value ->
                it == value || normalizedData == "$value".lowercase()
            }
        }
    }
}

