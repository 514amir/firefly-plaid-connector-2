/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.fireflyApi.models

import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 *
 * @param name
 * @param type
 * @param createdAt
 * @param updatedAt
 * @param active If omitted, defaults to true.
 * @param order Order of the account. Is NULL if account is not asset or liability.
 * @param accountRole
 * @param currencyId Use either currency_id or currency_code. Defaults to the user's default currency.
 * @param currencyCode Use either currency_id or currency_code. Defaults to the user's default currency.
 * @param currencySymbol
 * @param currencyDecimalPlaces
 * @param currentBalance
 * @param currentBalanceDate
 * @param iban
 * @param bic
 * @param accountNumber
 * @param openingBalance Represents the opening balance, the initial amount this account holds.
 * @param currentDebt Represents the current debt for liabilities.
 * @param openingBalanceDate Represents the date of the opening balance.
 * @param virtualBalance
 * @param includeNetWorth If omitted, defaults to true.
 * @param creditCardType
 * @param monthlyPaymentDate Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
 * @param liabilityType
 * @param liabilityDirection
 * @param interest Mandatory when type is liability. Interest percentage.
 * @param interestPeriod
 * @param notes
 * @param latitude Latitude of the accounts's location, if applicable. Can be used to draw a map.
 * @param longitude Latitude of the accounts's location, if applicable. Can be used to draw a map.
 * @param zoomLevel Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
 */

data class Account(

    @field:JsonProperty("name")
    val name: kotlin.String,

    @field:JsonProperty("type")
    val type: ShortAccountTypeProperty,

    @field:JsonProperty("created_at")
    val createdAt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("updated_at")
    val updatedAt: java.time.OffsetDateTime? = null,

    /* If omitted, defaults to true. */
    @field:JsonProperty("active")
    val active: kotlin.Boolean? = true,

    /* Order of the account. Is NULL if account is not asset or liability. */
    @field:JsonProperty("order")
    val order: kotlin.Int? = null,

    @field:JsonProperty("account_role")
    val accountRole: AccountRoleProperty? = null,

    /* Use either currency_id or currency_code. Defaults to the user's default currency. */
    @field:JsonProperty("currency_id")
    val currencyId: kotlin.String? = null,

    /* Use either currency_id or currency_code. Defaults to the user's default currency. */
    @field:JsonProperty("currency_code")
    val currencyCode: kotlin.String? = null,

    @field:JsonProperty("currency_symbol")
    val currencySymbol: kotlin.String? = null,

    @field:JsonProperty("currency_decimal_places")
    val currencyDecimalPlaces: kotlin.Int? = null,

    @field:JsonProperty("current_balance")
    val currentBalance: kotlin.String? = null,

    @field:JsonProperty("current_balance_date")
    val currentBalanceDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("iban")
    val iban: kotlin.String? = null,

    @field:JsonProperty("bic")
    val bic: kotlin.String? = null,

    @field:JsonProperty("account_number")
    val accountNumber: kotlin.String? = null,

    /* Represents the opening balance, the initial amount this account holds. */
    @field:JsonProperty("opening_balance")
    val openingBalance: kotlin.String? = null,

    /* Represents the current debt for liabilities. */
    @field:JsonProperty("current_debt")
    val currentDebt: kotlin.String? = null,

    /* Represents the date of the opening balance. */
    @field:JsonProperty("opening_balance_date")
    val openingBalanceDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("virtual_balance")
    val virtualBalance: kotlin.String? = null,

    /* If omitted, defaults to true. */
    @field:JsonProperty("include_net_worth")
    val includeNetWorth: kotlin.Boolean? = true,

    @field:JsonProperty("credit_card_type")
    val creditCardType: CreditCardType? = null,

    /* Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank. */
    @field:JsonProperty("monthly_payment_date")
    val monthlyPaymentDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("liability_type")
    val liabilityType: LiabilityType? = null,

    @field:JsonProperty("liability_direction")
    val liabilityDirection: LiabilityDirection? = null,

    /* Mandatory when type is liability. Interest percentage. */
    @field:JsonProperty("interest")
    val interest: kotlin.String? = null,

    @field:JsonProperty("interest_period")
    val interestPeriod: LiabilityDirection? = null,

    @field:JsonProperty("notes")
    val notes: kotlin.String? = null,

    /* Latitude of the accounts's location, if applicable. Can be used to draw a map. */
    @field:JsonProperty("latitude")
    val latitude: kotlin.Double? = null,

    /* Latitude of the accounts's location, if applicable. Can be used to draw a map. */
    @field:JsonProperty("longitude")
    val longitude: kotlin.Double? = null,

    /* Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. */
    @field:JsonProperty("zoom_level")
    val zoomLevel: kotlin.Int? = null

)

