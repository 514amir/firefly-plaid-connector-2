/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.fireflyApi.apis

import com.fasterxml.jackson.databind.ObjectMapper
import io.ktor.client.*
import io.ktor.client.engine.*
import net.djvk.fireflyPlaidConnector2.fireflyApi.infrastructure.*
import net.djvk.fireflyPlaidConnector2.fireflyApi.models.InsightGroupEntry
import net.djvk.fireflyPlaidConnector2.fireflyApi.models.InsightTotalEntry
import net.djvk.fireflyPlaidConnector2.fireflyApi.models.InsightTransferEntry

open class InsightApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: ObjectMapper.() -> Unit = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

    /**
     * Insight into expenses, grouped by asset account.
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseAsset(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/asset",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, grouped by bill.
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param bills The bills to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseBill(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        bills: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        bills?.apply { localVariableQuery["bills[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/bill",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, grouped by budget.
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param budgets The budgets to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseBudget(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        budgets: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        budgets?.apply { localVariableQuery["budgets[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/budget",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, grouped by category.
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param categories The categories to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        categories: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        categories?.apply { localVariableQuery["categories[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, grouped by expense account.
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you add the accounts ID&#39;s of expense accounts, only those accounts are included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID&#39;s. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseExpense(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/expense",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, without bill.
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseNoBill(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/no-bill",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, without budget.
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseNoBudget(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/no-budget",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, without category.
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseNoCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/no-category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, without tag.
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseNoTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/no-tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, grouped by tag.
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param tags The tags to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        tags: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        tags?.apply { localVariableQuery["tags[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into total expenses.
     * This endpoint gives a sum of the total expenses made by the user.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightExpenseTotal(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/expense/total",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, grouped by asset account.
     * This endpoint gives a summary of the income received by the user, grouped by asset account.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeAsset(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/asset",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, grouped by category.
     * This endpoint gives a summary of the income received by the user, grouped by (any) category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param categories The categories to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        categories: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        categories?.apply { localVariableQuery["categories[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, without category.
     * This endpoint gives a summary of the income received by the user, including only income with no category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeNoCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/no-category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, without tag.
     * This endpoint gives a summary of the income received by the user, including only income with no tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeNoTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/no-tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, grouped by revenue account.
     * This endpoint gives a summary of the income received by the user, grouped by revenue account.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you add the accounts ID&#39;s of revenue accounts, only those accounts are included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID&#39;s. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeRevenue(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/revenue",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into income, grouped by tag.
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param tags The tags to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        tags: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        tags?.apply { localVariableQuery["tags[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into total income.
     * This endpoint gives a sum of the total income received by the user.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightIncomeTotal(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/income/total",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into transfers, grouped by category.
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param categories The categories to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransferCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        categories: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        categories?.apply { localVariableQuery["categories[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into transfers, without category.
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransferNoCategory(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/no-category",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into expenses, without tag.
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransferNoTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/no-tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into transfers, grouped by tag.
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param tags The tags to be included in the results.  (optional)
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightGroupEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransferTag(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        tags: kotlin.collections.List<kotlin.Long>?,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightGroupEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        tags?.apply { localVariableQuery["tags[]"] = toMultiValue(this, "multi") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/tag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into total transfers.
     * This endpoint gives a sum of the total amount transfers made by the user.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTotalEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransferTotal(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTotalEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/total",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Insight into transfers, grouped by account.
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability.
     * @param start A date formatted YYYY-MM-DD.
     * @param end A date formatted YYYY-MM-DD.
     * @param accounts The accounts to be included in the results. If you include ID&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID&#39;s will be ignored.  (optional)
     * @return kotlin.collections.List<InsightTransferEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun insightTransfers(
        start: java.time.LocalDate,
        end: java.time.LocalDate,
        accounts: kotlin.collections.List<kotlin.Long>?
    ): HttpResponse<kotlin.collections.List<InsightTransferEntry>> {

        val localVariableAuthNames = listOf<String>("firefly_iii_auth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        start.apply { localVariableQuery["start"] = listOf("$start") }
        end.apply { localVariableQuery["end"] = listOf("$end") }
        accounts?.apply { localVariableQuery["accounts[]"] = toMultiValue(this, "multi") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/insight/transfer/asset",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
